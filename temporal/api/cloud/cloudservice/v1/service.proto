syntax = "proto3";

package temporal.api.cloud.cloudservice.v1;

option go_package = "go.temporal.io/api/cloud/cloudservice/v1;cloudservice";
option java_package = "io.temporal.api.cloud.cloudservice.v1";
option java_multiple_files = true;
option java_outer_classname = "ServiceProto";
option ruby_package = "Temporalio::Api::Cloud::CloudService::V1";
option csharp_namespace = "Temporalio.Api.Cloud.CloudService.V1";

import "temporal/api/cloud/cloudservice/v1/request_response.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        title: "Temporal Cloud Ops API";
        description: "Programmatic access to manage Temporal Cloud control plane resources including namespaces, users, service accounts, and more.";
        version: "1.0";
        extensions: {
            key: "x-logo";
            value: {
                struct_value: {
                    fields: {
                        key: "url";
                        value: {
                            string_value: "https://images.ctfassets.net/0uuz8ydxyd9p/4YGUnEoCaH9SyoUDhlJkau/e1600205d17eeee3033d926ef06664a9/Temporal_LogoLockup_Horizontal_dark_1.svg";
                        }
                    }
                }
            }
        }
    };
    external_docs: {
        url: "https://docs.temporal.io/cloud";
        description: "Temporal Cloud Documentation";
    };
    tags: [
        {name: "Namespaces"; description: "Manage Temporal Cloud namespaces"},
        {name: "Users"; description: "Manage users and their namespace access"},
        {name: "Service Accounts"; description: "Manage service accounts and their namespace access"},
        {name: "API Keys"; description: "Manage API keys for authentication"},
        {name: "Groups"; description: "Manage user groups and group membership"},
        {name: "Nexus"; description: "Manage Nexus endpoints"},
        {name: "High Availability"; description: "Manage high availability (multi-region, multi-cloud, and same-region replication) namespace configurations"},
        {name: "Export Sinks"; description: "Manage data export configurations"},
        {name: "Connectivity Rules"; description: "Manage network connectivity rules"},
        {name: "Regions"; description: "Query available regions"},
        {name: "Account"; description: "Manage account settings and usage"},
        {name: "Operations"; description: "Query async operation status"}
    ];
    security_definitions: {
        security: {
            key: "ApiKeyAuth";
            value: {
                type: TYPE_API_KEY;
                in: IN_HEADER;
                name: "Authorization";
                description: "API key authentication. Use 'Bearer YOUR_API_KEY' format. See https://docs.temporal.io/cloud/api-keys";
            }
        }
    }
    security: {
        security_requirement: {
            key: "ApiKeyAuth";
            value: {};
        }
    }
};

// WARNING: This service is currently experimental and may change in
// incompatible ways.
service CloudService {
    // Gets all known users
    rpc GetUsers(GetUsersRequest) returns (GetUsersResponse) {
        option (google.api.http) = {
            get: "/cloud/users",
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Users"];
            summary: "List all users";
            description: "Returns a list of all users in the account";
            operation_id: "listUsers";
            external_docs: {
                url: "https://docs.temporal.io/cloud/users";
                description: "User management documentation";
            };
        };
    }

    // Get a user
    rpc GetUser(GetUserRequest) returns (GetUserResponse) {
        option (google.api.http) = {
            get: "/cloud/users/{user_id}",
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Users"];
            summary: "Get user by ID";
            description: "Takes a user ID, returns user details";
            external_docs: {
                url: "https://docs.temporal.io/cloud/users";
                description: "User management documentation";
            };
        };
    }

    // Create a user
    rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {
        option (google.api.http) = {
            post: "/cloud/users",
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Users"];
            summary: "Create a user";
            description: "Creates a new user in the account";
        };
    }

    // Update a user
    rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {
        option (google.api.http) = {
            post: "/cloud/users/{user_id}",
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Users"];
            summary: "Update a user";
            description: "Updates an existing user's details";
        };
    }

    // Delete a user
    rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse) {
        option (google.api.http) = {
            delete: "/cloud/users/{user_id}",
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Users"];
            summary: "Delete a user";
            description: "Removes a user from the account";
        };
    }

    // Set a user's access to a namespace
    rpc SetUserNamespaceAccess(SetUserNamespaceAccessRequest) returns (SetUserNamespaceAccessResponse) {
        option (google.api.http) = {
            post: "/cloud/namespaces/{namespace}/users/{user_id}/access",
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Users"];
            summary: "Set user namespace access";
            description: "Configures a user's permissions for a specific namespace";
            external_docs: {
                url: "https://docs.temporal.io/cloud/users-namespace-level-permissions";
                description: "Namespace permissions documentation";
            };
        };
    }

    // Get the latest information on an async operation
    rpc GetAsyncOperation(GetAsyncOperationRequest) returns (GetAsyncOperationResponse) {
        option (google.api.http) = {
            get: "/cloud/operations/{async_operation_id}",
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Operations"];
            summary: "Get async operation status";
            description: "Returns the current status and details of an asynchronous operation";
        };
    }

    // Create a new namespace
    rpc CreateNamespace (CreateNamespaceRequest) returns (CreateNamespaceResponse) {
        option (google.api.http) = {
            post: "/cloud/namespaces",
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Namespaces"];
            summary: "Create a namespace";
            description: "Creates a new namespace in the account";
            external_docs: {
                url: "https://docs.temporal.io/cloud/namespaces";
                description: "Namespace management documentation";
            };
        };
    }

    // Get all namespaces
    rpc GetNamespaces (GetNamespacesRequest)  returns (GetNamespacesResponse) {
        option (google.api.http) = {
            get: "/cloud/namespaces",
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Namespaces"];
            summary: "List all namespaces";
            description: "Returns a list of all namespaces in the account";
            external_docs: {
                url: "https://docs.temporal.io/cloud/namespaces";
                description: "Namespace management documentation";
            };
        };
    }

    // Get a namespace
    rpc GetNamespace (GetNamespaceRequest) returns (GetNamespaceResponse) {
        option (google.api.http) = {
            get: "/cloud/namespaces/{namespace}",
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Namespaces"];
            summary: "Get namespace details";
            description: "Returns detailed information about a specific namespace";
            external_docs: {
                url: "https://docs.temporal.io/cloud/namespaces";
                description: "Namespace management documentation";
            };
        };
    }

    // Update a namespace
    rpc UpdateNamespace (UpdateNamespaceRequest) returns (UpdateNamespaceResponse) {
        option (google.api.http) = {
            post: "/cloud/namespaces/{namespace}",
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Namespaces"];
            summary: "Update a namespace";
            description: "Updates configuration for an existing namespace";
        };
    }

    // Rename an existing customer search attribute
    rpc RenameCustomSearchAttribute (RenameCustomSearchAttributeRequest) returns (RenameCustomSearchAttributeResponse) {
        option (google.api.http) = {
            post: "/cloud/namespaces/{namespace}/rename-custom-search-attribute",
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Namespaces"];
            summary: "Rename custom search attribute";
            description: "Renames a custom search attribute in a namespace";
            external_docs: {
                url: "https://docs.temporal.io/visibility#custom-search-attributes";
                description: "Custom Search Attributes documentation";
            };
        };
    }

    // Delete a namespace
    rpc DeleteNamespace (DeleteNamespaceRequest) returns (DeleteNamespaceResponse) {
        option (google.api.http) = {
            delete: "/cloud/namespaces/{namespace}",
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Namespaces"];
            summary: "Delete a namespace";
            description: "Permanently deletes a namespace and all its data";
        };
    }

    // Failover a multi-region namespace
    rpc FailoverNamespaceRegion (FailoverNamespaceRegionRequest) returns (FailoverNamespaceRegionResponse) {
        option (google.api.http) = {
            post: "/cloud/namespaces/{namespace}/failover-region",
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["High Availability"];
            summary: "Failover namespace region";
            description: "Initiates a regional failover for a high availability namespace";
            external_docs: {
                url: "https://docs.temporal.io/cloud/high-availability";
                description: "High availability namespace documentation";
            };
        };
    }

    // Add a new region to a namespace
    rpc AddNamespaceRegion (AddNamespaceRegionRequest) returns (AddNamespaceRegionResponse) {
        option (google.api.http) = {
            post: "/cloud/namespaces/{namespace}/add-region",
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["High Availability"];
            summary: "Add namespace region";
            description: "Adds a new replica to an existing namespace";
            external_docs: {
                url: "https://docs.temporal.io/cloud/high-availability";
                description: "High availability namespace documentation";
            };
        };
    }

    // Delete a region from a namespace
    rpc DeleteNamespaceRegion (DeleteNamespaceRegionRequest) returns (DeleteNamespaceRegionResponse) {
        option (google.api.http) = {
            delete: "/cloud/namespaces/{namespace}/regions/{region}",
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["High Availability"];
            summary: "Remove namespace region";
            description: "Removes a replica from a high availability namespace";
            external_docs: {
                url: "https://docs.temporal.io/cloud/high-availability";
                description: "High availability namespace documentation";
            };
        };
    }

    // Get all regions
    rpc GetRegions (GetRegionsRequest) returns (GetRegionsResponse) {
        option (google.api.http) = {
            get: "/cloud/regions",
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Regions"];
            summary: "List all regions";
            description: "Returns a list of all available cloud regions";
            external_docs: {
                url: "https://docs.temporal.io/cloud/regions";
                description: "Regions documentation";
            };
        };
    }

    // Get a region
    rpc GetRegion (GetRegionRequest) returns (GetRegionResponse) {
        option (google.api.http) = {
            get: "/cloud/regions/{region}",
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Regions"];
            summary: "Get region details";
            description: "Returns detailed information about a specific region";
            external_docs: {
                url: "https://docs.temporal.io/cloud/regions";
                description: "Regions documentation";
            };
        };
    }

    // Get all known API keys
    rpc GetApiKeys (GetApiKeysRequest) returns (GetApiKeysResponse) {
        option (google.api.http) = {
            get: "/cloud/api-keys",
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["API Keys"];
            summary: "List all API keys";
            description: "Returns a list of all API keys in the account";
            external_docs: {
                url: "https://docs.temporal.io/cloud/api-keys";
                description: "API Keys documentation";
            };
        };
    }

    // Get an API key
    rpc GetApiKey (GetApiKeyRequest) returns (GetApiKeyResponse) {
        option (google.api.http) = {
            get: "/cloud/api-keys/{key_id}",
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["API Keys"];
            summary: "Get API key details";
            description: "Returns detailed information about a specific API key";
            external_docs: {
                url: "https://docs.temporal.io/cloud/api-keys";
                description: "API Keys documentation";
            };
        };
    }

    // Create an API key
    rpc CreateApiKey (CreateApiKeyRequest) returns (CreateApiKeyResponse) {
        option (google.api.http) = {
            post: "/cloud/api-keys",
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["API Keys"];
            summary: "Create an API key";
            description: "Creates a new API key for programmatic access";
        };
    }

    // Update an API key
    rpc UpdateApiKey (UpdateApiKeyRequest) returns (UpdateApiKeyResponse) {
        option (google.api.http) = {
            post: "/cloud/api-keys/{key_id}",
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["API Keys"];
            summary: "Update an API key";
            description: "Updates an existing API key's properties";
        };
    }

    // Delete an API key
    rpc DeleteApiKey (DeleteApiKeyRequest) returns (DeleteApiKeyResponse) {
        option (google.api.http) = {
            delete: "/cloud/api-keys/{key_id}",
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["API Keys"];
            summary: "Delete an API key";
            description: "Revokes and deletes an API key";
        };
    }

    // Gets nexus endpoints
    rpc GetNexusEndpoints(GetNexusEndpointsRequest) returns (GetNexusEndpointsResponse) {
        option (google.api.http) = {
            get: "/cloud/nexus/endpoints",
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Nexus"];
            summary: "List all Nexus endpoints";
            description: "Returns a list of all Nexus endpoints in the account";
            external_docs: {
                url: "https://docs.temporal.io/nexus";
                description: "Nexus documentation";
            };
        };
    }

    // Get a nexus endpoint
    rpc GetNexusEndpoint(GetNexusEndpointRequest) returns (GetNexusEndpointResponse) {
        option (google.api.http) = {
            get: "/cloud/nexus/endpoints/{endpoint_id}",
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Nexus"];
            summary: "Get Nexus endpoint details";
            description: "Returns detailed information about a specific Nexus endpoint";
            external_docs: {
                url: "https://docs.temporal.io/nexus";
                description: "Nexus documentation";
            };
        };
    }

    // Create a nexus endpoint
    rpc CreateNexusEndpoint(CreateNexusEndpointRequest) returns (CreateNexusEndpointResponse) {
        option (google.api.http) = {
            post: "/cloud/nexus/endpoints",
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Nexus"];
            summary: "Create a Nexus endpoint";
            description: "Creates a new Nexus endpoint for cross-namespace communication";
        };
    }

    // Update a nexus endpoint
    rpc UpdateNexusEndpoint(UpdateNexusEndpointRequest) returns (UpdateNexusEndpointResponse) {
        option (google.api.http) = {
            post: "/cloud/nexus/endpoints/{endpoint_id}",
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Nexus"];
            summary: "Update a Nexus endpoint";
            description: "Updates an existing Nexus endpoint's configuration";
        };
    }

    // Delete a nexus endpoint
    rpc DeleteNexusEndpoint(DeleteNexusEndpointRequest) returns (DeleteNexusEndpointResponse) {
        option (google.api.http) = {
            delete: "/cloud/nexus/endpoints/{endpoint_id}",
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Nexus"];
            summary: "Delete a Nexus endpoint";
            description: "Removes a Nexus endpoint from the account";
        };
    }

    // Get all user groups
    rpc GetUserGroups (GetUserGroupsRequest) returns (GetUserGroupsResponse) {
        option (google.api.http) = {
            get: "/cloud/user-groups",
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Groups"];
            summary: "List all user groups";
            description: "Returns a list of all user groups in the account";
            external_docs: {
                url: "https://docs.temporal.io/cloud/users-account-level-roles";
                description: "User groups documentation";
            };
        };
    }

    // Get a user group
    rpc GetUserGroup (GetUserGroupRequest) returns (GetUserGroupResponse) {
        option (google.api.http) = {
            get: "/cloud/user-groups/{group_id}",
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Groups"];
            summary: "Get user group details";
            description: "Returns detailed information about a specific user group";
            external_docs: {
                url: "https://docs.temporal.io/cloud/users-account-level-roles";
                description: "User groups documentation";
            };
        };
    }

    // Create new a user group
    rpc CreateUserGroup (CreateUserGroupRequest) returns (CreateUserGroupResponse) {
        option (google.api.http) = {
            post: "/cloud/user-groups",
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Groups"];
            summary: "Create a user group";
            description: "Creates a new user group for managing permissions";
        };
    }

    // Update a user group
    rpc UpdateUserGroup (UpdateUserGroupRequest) returns (UpdateUserGroupResponse) {
        option (google.api.http) = {
            post: "/cloud/user-groups/{group_id}",
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Groups"];
            summary: "Update a user group";
            description: "Updates an existing user group's properties";
        };
    }

    // Delete a user group
    rpc DeleteUserGroup (DeleteUserGroupRequest) returns (DeleteUserGroupResponse) {
        option (google.api.http) = {
            delete: "/cloud/user-groups/{group_id}",
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Groups"];
            summary: "Delete a user group";
            description: "Removes a user group from the account";
        };
    }

    // Set a user group's access to a namespace
    rpc SetUserGroupNamespaceAccess (SetUserGroupNamespaceAccessRequest) returns (SetUserGroupNamespaceAccessResponse) {
        option (google.api.http) = {
            post: "/cloud/namespaces/{namespace}/user-groups/{group_id}/access",
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Groups"];
            summary: "Set user group namespace access";
            description: "Configures a user group's permissions for a specific namespace";
            external_docs: {
                url: "https://docs.temporal.io/cloud/users-namespace-level-permissions";
                description: "Namespace permissions documentation";
            };
        };
    }

    // Add a member to the group, can only be used with Cloud group types.
    rpc AddUserGroupMember(AddUserGroupMemberRequest) returns (AddUserGroupMemberResponse) {
        option (google.api.http) = {
            post: "/cloud/user-groups/{group_id}/members",
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Groups"];
            summary: "Add member to user group";
            description: "Adds a user to a user group (Cloud groups only)";
        };
    }

    // Remove a member from the group, can only be used with Cloud group types.
    rpc RemoveUserGroupMember(RemoveUserGroupMemberRequest) returns (RemoveUserGroupMemberResponse) {
        option (google.api.http) = {
            post: "/cloud/user-groups/{group_id}/remove-member",
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Groups"];
            summary: "Remove member from user group";
            description: "Removes a user from a user group (Cloud groups only)";
        };
    }

    rpc GetUserGroupMembers(GetUserGroupMembersRequest) returns (GetUserGroupMembersResponse) {
        option (google.api.http) = {
            get: "/cloud/user-groups/{group_id}/members",
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Groups"];
            summary: "List user group members";
            description: "Returns a list of all members in a user group";
        };
    }

    // Create a service account.
    rpc CreateServiceAccount(CreateServiceAccountRequest) returns (CreateServiceAccountResponse) {
        option (google.api.http) = {
            post: "/cloud/service-accounts",
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Service Accounts"];
            summary: "Create a service account";
            description: "Creates a new service account for automated access";
            external_docs: {
                url: "https://docs.temporal.io/cloud/service-accounts";
                description: "Service Accounts documentation";
            };
        };
    }

    // Get a service account.
    rpc GetServiceAccount(GetServiceAccountRequest) returns (GetServiceAccountResponse) {
        option (google.api.http) = {
            get: "/cloud/service-accounts/{service_account_id}",
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Service Accounts"];
            summary: "Get service account details";
            description: "Returns detailed information about a specific service account";
            external_docs: {
                url: "https://docs.temporal.io/cloud/service-accounts";
                description: "Service Accounts documentation";
            };
        };
    }

    // Get service accounts.
    rpc GetServiceAccounts(GetServiceAccountsRequest) returns (GetServiceAccountsResponse) {
        option (google.api.http) = {
            get: "/cloud/service-accounts",
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Service Accounts"];
            summary: "List all service accounts";
            description: "Returns a list of all service accounts in the account";
            external_docs: {
                url: "https://docs.temporal.io/cloud/service-accounts";
                description: "Service Accounts documentation";
            };
        };
    }

    // Update a service account.
    rpc UpdateServiceAccount(UpdateServiceAccountRequest) returns (UpdateServiceAccountResponse) {
        option (google.api.http) = {
            post: "/cloud/service-accounts/{service_account_id}",
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Service Accounts"];
            summary: "Update a service account";
            description: "Updates an existing service account's properties";
        };
    }

    // Set a service account's access to a namespace.
    rpc SetServiceAccountNamespaceAccess(SetServiceAccountNamespaceAccessRequest) returns (SetServiceAccountNamespaceAccessResponse) {
        option (google.api.http) = {
            post: "/cloud/namespaces/{namespace}/service-accounts/{service_account_id}/access",
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Service Accounts"];
            summary: "Set service account namespace access";
            description: "Configures a service account's permissions for a specific namespace";
            external_docs: {
                url: "https://docs.temporal.io/cloud/users-namespace-level-permissions";
                description: "Namespace permissions documentation";
            };
        };
    }

    // Delete a service account.
    rpc DeleteServiceAccount(DeleteServiceAccountRequest) returns (DeleteServiceAccountResponse) {
        option (google.api.http) = {
            delete: "/cloud/service-accounts/{service_account_id}",
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Service Accounts"];
            summary: "Delete a service account";
            description: "Removes a service account from the account";
        };
    }

    // WARNING: Pre-Release Feature
    // Get usage data across namespaces
    rpc GetUsage(GetUsageRequest) returns (GetUsageResponse) {
        option (google.api.http) = {
            get: "/cloud/usage",
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Account"];
            summary: "Get usage data across namespaces.";
            deprecated: true;
        };
    }

    // Get account information.
    rpc GetAccount (GetAccountRequest) returns (GetAccountResponse) {
        option (google.api.http) = {
            get: "/cloud/account",
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Account"];
            summary: "Get account details";
            description: "Returns detailed information about the account";
        };
    }

    // Update account information.
    rpc UpdateAccount (UpdateAccountRequest) returns (UpdateAccountResponse) {
        option (google.api.http) = {
            post: "/cloud/account",
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Account"];
            summary: "Update account details";
            description: "Updates account configuration and settings";
        };
    }

    // Create an export sink
    rpc CreateNamespaceExportSink(CreateNamespaceExportSinkRequest) returns (CreateNamespaceExportSinkResponse) {
        option (google.api.http) = {
            post: "/cloud/namespaces/{namespace}/export-sinks",
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Export Sinks"];
            summary: "Create namespace export sink";
            description: "Creates a new export sink for exporting namespace data";
            external_docs: {
                url: "https://docs.temporal.io/cloud/export";
                description: "Export documentation";
            };
        };
    }

    // Get an export sink
    rpc GetNamespaceExportSink(GetNamespaceExportSinkRequest) returns (GetNamespaceExportSinkResponse) {
        option (google.api.http) = {
            get: "/cloud/namespaces/{namespace}/export-sinks/{name}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Export Sinks"];
            summary: "Get export sink details";
            description: "Returns detailed information about a specific export sink";
            external_docs: {
                url: "https://docs.temporal.io/cloud/export";
                description: "Export documentation";
            };
        };
    }

    // Get export sinks
    rpc GetNamespaceExportSinks(GetNamespaceExportSinksRequest) returns (GetNamespaceExportSinksResponse) {
        option (google.api.http) = {
            get: "/cloud/namespaces/{namespace}/export-sinks"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Export Sinks"];
            summary: "List namespace export sinks";
            description: "Returns a list of all export sinks for a namespace";
            external_docs: {
                url: "https://docs.temporal.io/cloud/export";
                description: "Export documentation";
            };
        };
    }

    // Update an export sink
    rpc UpdateNamespaceExportSink(UpdateNamespaceExportSinkRequest) returns (UpdateNamespaceExportSinkResponse) {
        option (google.api.http) = {
            post: "/cloud/namespaces/{namespace}/export-sinks/{spec.name}",
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Export Sinks"];
            summary: "Update namespace export sink";
            description: "Updates an existing export sink's configuration";
        };
    }

    // Delete an export sink
    rpc DeleteNamespaceExportSink(DeleteNamespaceExportSinkRequest) returns (DeleteNamespaceExportSinkResponse) {
        option (google.api.http) = {
            delete: "/cloud/namespaces/{namespace}/export-sinks/{name}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Export Sinks"];
            summary: "Delete namespace export sink";
            description: "Removes an export sink from a namespace";
        };
    }

    // Validates an export sink configuration by delivering an empty test file to the specified sink.
    // This operation verifies that the sink is correctly configured, accessible, and ready for data export.
    rpc ValidateNamespaceExportSink(ValidateNamespaceExportSinkRequest) returns (ValidateNamespaceExportSinkResponse) {
        option (google.api.http) = {
            post: "/cloud/namespaces/{namespace}/export-sinks/validate",
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Export Sinks"];
            summary: "Validate export sink configuration";
            description: "Tests export sink configuration by delivering a test file to verify accessibility";
        };
    }

    // Update the tags for a namespace
     rpc UpdateNamespaceTags(UpdateNamespaceTagsRequest) returns (UpdateNamespaceTagsResponse) {
        option (google.api.http) = {
            post: "/cloud/namespaces/{namespace}/update-tags"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Namespaces"];
            summary: "Update namespace tags";
            description: "Updates the tags associated with a namespace";
        };
    }

    // Creates a connectivity rule
    rpc CreateConnectivityRule(CreateConnectivityRuleRequest) returns (CreateConnectivityRuleResponse) {
        option (google.api.http) = {
            post: "/cloud/connectivity-rules"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Connectivity Rules"];
            summary: "Create connectivity rule";
            description: "Creates a new connectivity rule for network access control";
            external_docs: {
                url: "https://docs.temporal.io/cloud/connectivity";
                description: "Connectivity documentation";
            };
        };
    }

    // Gets a connectivity rule by id
    rpc GetConnectivityRule(GetConnectivityRuleRequest) returns (GetConnectivityRuleResponse) {
        option (google.api.http) = {
            get: "/cloud/connectivity-rules/{connectivity_rule_id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Connectivity Rules"];
            summary: "Get connectivity rule details";
            description: "Returns detailed information about a specific connectivity rule";
            external_docs: {
                url: "https://docs.temporal.io/cloud/security#connectivity-rules";
                description: "Connectivity rules documentation";
            };
        };
    }

    // Lists connectivity rules by account
    rpc GetConnectivityRules(GetConnectivityRulesRequest) returns (GetConnectivityRulesResponse) {
        option (google.api.http) = {
            get: "/cloud/connectivity-rules"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Connectivity Rules"];
            summary: "List all connectivity rules";
            description: "Returns a list of all connectivity rules in the account";
            external_docs: {
                url: "https://docs.temporal.io/cloud/security#connectivity-rules";
                description: "Connectivity rules documentation";
            };
        };
    }

    // Deletes a connectivity rule by id
    rpc DeleteConnectivityRule(DeleteConnectivityRuleRequest) returns (DeleteConnectivityRuleResponse) {
        option (google.api.http) = {
            delete: "/cloud/connectivity-rules/{connectivity_rule_id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Connectivity Rules"];
            summary: "Delete connectivity rule";
            description: "Removes a connectivity rule from the account";
        };
    }

    // Validate customer audit log sink is accessible from Temporal's workflow by delivering an empty file to the specified sink.
    // The operation verifies that the sink is correctly configured, accessible and ready to receive audit logs.
    rpc ValidateAccountAuditLogSink(ValidateAccountAuditLogSinkRequest) returns (ValidateAccountAuditLogSinkResponse) {
        option (google.api.http) = {
            post: "/cloud/account/audit-logs/sink/validate",
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Account"];
            summary: "Validate audit log sink"
            description: "Validate customer audit log sink is accessible from Temporal's workflow by delivering an empty file to the specified sink. The operation verifies that the sink is correctly configured, accessible and ready to receive audit logs."
            external_docs: {
                url: "https://docs.temporal.io/cloud/audit-logging";
                description: "Audit logging documentation";
            };
        };
    }
}
